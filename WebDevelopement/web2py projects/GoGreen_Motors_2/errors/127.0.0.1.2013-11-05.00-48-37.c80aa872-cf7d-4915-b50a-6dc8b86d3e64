(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'edit_emp_3'"
p3
sS'layer'
p4
S'/home/urvashi/Desktop/WEB2PY/web2py/applications/GoGreen_Motors_2/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef search():\n     """an ajax wiki search page"""\n     return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\',\n              _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),\n              target_div=DIV(_id=\'target\'))\n              \ndef callback():\n     """an ajax callback that returns a <ul> of links to wiki pages"""\n     query1 = db.EMPLOYEE.Name.contains(request.vars.keyword)\n     query2 = db.CUSTOMER.Name.contains(request.vars.keyword)\n     pages1 = db(query1).select()\n     pages2 = db(query2).select()\n     links = [A(p.Name, _href=URL(\'edit_empl\',args=p.Emp_ID)) for p in pages1]\n     #links.append([A(p.Name) for p in pages2])\n     return UL(*links)\n              \n\n            \ndef index():\n    \'auth\' in globals()\n   \n    message="Go Green Welcomes You !!"\n    if auth.user :\n        if auth.user.id==1:\n            message="Welcome TSM HYDERABAD"\n            redirect(URL(\'admin\'))\n        else:\n            message="Welcome Employee"\n            redirect(URL(\'empl\'))\n    else:\n        redirect(URL(\'user\'))\n    return locals()\n\ndef admin():\n    man=db(db.EMPLOYEE.Designation==\'Manager\').select()\n    team=db(db.EMPLOYEE.Designation==\'Team Leader\').select()\n    exe=db(db.EMPLOYEE.Designation==\'Executive\').select()\n    return locals()\ndef add_employee():\n    \'auth\' in globals()\n\n    if auth.user:\n         if auth.user.id!=1:\n             redirect(URL(\'user\'))\n         else:\n            form=SQLFORM(db.EMPLOYEE)\n            if form.accepts(request.vars,session):\n                    response.flash=\'Employee Added !!\'\n            elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n         redirect(URL(\'user\'))\n    return locals()\n\ndef delete_employee():\n    \'auth\' in globals()\n    message=""\n    if auth.user.id==1:\n        list=db(db.EMPLOYEE.Emp_ID>0).select()\n        form=SQLFORM.factory(\n                    db.Field(\'usrname\',db.EMPLOYEE,requires=IS_IN_DB(db,\'EMPLOYEE.Emp_ID\',\'EMPLOYEE.Email_id\'),required=True))\n        if form.accepts(request.vars,session):\n                    e=db(db.EMPLOYEE.Emp_ID==int(request.vars.usrname)).select()\n                    db(db.EMPLOYEE.Emp_ID==int(request.vars.usrname)).delete()\n                    db(db.auth_user.email==e[0][\'Email_id\']).delete()\n                    message="employee deleted !!"\n                    redirect(URL(\'delete_employee\'))\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'user\'))\n    return locals()\n\ndef edit_emp():\n        \'auth\' in globals()\n        if auth.user.id==1:\n             form=SQLFORM.factory(db.Field(\'usrname\',db.EMPLOYEE,requires=IS_IN_DB(db,\'EMPLOYEE.Emp_ID\',\'EMPLOYEE.Email_id\'),required=True))\n             if form.accepts(request.vars,session):\n                    print "888888888888"\n                    print form.vars.usrname\n                    redirect(URL(r=request, f=\'edit_empl?eid=%d\' % int(form.vars.usrname)))\n             elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n        else:\n            redirect(URL(\'user\'))\n        return locals()\ndef edit_empl():\n      print \'****************////\'\n      eid=request.args(0)\n      #if(request.vars.eid)==\'\':\n       #  print \'yes\'\n        # eid=request.args(0)\n      #else:\n       #   eid=int(request.vars.eid)\n      print eid  \n      record=db(db.EMPLOYEE.Emp_ID==eid).select()\n      return locals()\ndef edit_emp_3():\n     if auth.user:\n         eid=request.post_vars.eid\n         nam=request.post_vars.nam\n         add=request.post_vars.add\n         no=request.post_vars.no\n         sal=request.post_vars.sal\n         deg=request.post_vars.deg\n         email=request.post_vars.email\n         db(db.EMPLOYEE.Emp_ID==eid).update(Name=nam,Address=add,Ph_no=no,Salary=sal,Designation=deg,Email_id=email)\n         redirect(URL(\'edit_emp\'))\n         return locals()\n           \ndef add_model():\n    \'auth\' in globals()\n    if auth.user.id==1:\n        form=SQLFORM(db.MODEL)\n        if form.accepts(request.vars,session):\n                    response.flash=\'Model Added !!\'\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\ndef del_model():\n    \'auth\' in globals()\n    message=""\n    if auth.user.id==1:\n        form=SQLFORM.factory(\n                    db.Field(\'model\',db.MODEL,requires=IS_IN_DB(db,\'MODEL.Model_no\',\'Models.Name\'),required=True))\n        if form.accepts(request.vars,session):\n                    db(db.MODEL.Model_no==request.vars.model).delete()\n                    response.flash="Model Deleted !!"\n                    redirect(URL(\'del_model\'))\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef add_other_product():\n    \'auth\' in globals()\n    if auth.user.id==1:\n        form=SQLFORM(db.OTHER_PRODUCTS)\n        if form.accepts(request.vars,session):\n                    response.flash=\'Product Added !!\'\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\ndef del_other_product():\n    \'auth\' in globals()\n    message=""\n    if auth.user.id==1:\n        form=SQLFORM.factory(\n                    db.Field(\'product\',db.OTHER_PRODUCTS,requires=IS_IN_DB(db,\'OTHER_PRODUCTS.Product_ID\',\'OTHER_PRODUCTS.Name\'),required=True))\n        if form.accepts(request.vars,session):\n                    db(db.OTHER_PRODUCTS.Product_ID==request.vars.product).delete()\n                    response.flash="Product Deleted !!"\n                    redirect(URL(\'del_other_product\'))\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef empl():\n    if auth.user:\n            e=db(str(auth.user.email) == db.EMPLOYEE.Email_id).select()\n            ee=str(e[0][\'EMPLOYEE.Designation\'])\n    else:\n            redirect(URL(\'user\'))\n    return locals()\n            \n       \ndef add_customer():\n    \'auth\' in globals()\n    if auth.user:\n        form=SQLFORM(db.CUSTOMER)\n        if form.accepts(request.vars,session):\n                    response.flash=\'Customer Added !!\'\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n    \ndef add_sale():\n    \'auth\' in globals()\n    if auth.user:\n        form=SQLFORM(db.BOUGHT)\n        if form.accepts(request.vars,session):\n                    response.flash=\'Product Sold !!\'\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef order_bike():\n    \'auth\' in globals()\n    if auth.user:\n        form=SQLFORM(db.DEMANDS)\n        if form.accepts(request.vars,session):\n                    response.flash=\'Bike Ordered !!\'\n                    list=db(db.FINANCE.Id>0).select(orderby=~(db.FINANCE.Id))\n                    l=int(list[0][\'FINANCE.Id\']) + 1\n                 #   print \'%%%%%\'\n                 #   print l\n                 #   e=db(db.EMPLOYEE.Emp_ID>0).select()\n                 #   print "///"\n                  #  print auth.user.email\n                    e=db(str(auth.user.email) == db.EMPLOYEE.Email_id).select()\n                  #  print \'*****\'\n                   # print e\n                    ee=int(e[0][\'EMPLOYEE.Emp_ID\'])\n                   # print "88888888888888"\n                  #  print ee\n                    db.FINANCE.insert(id=l,Type=\'Income\',Date=request.now.date(),Cause=\'Bike sale\',Employee_Id=ee)\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef sell_bike():\n    \'auth\' in globals()\n    if auth.user:\n        form=SQLFORM(db.DELIVERS_TO)\n        if form.accepts(request.vars,session):\n                    m=int(request.vars.Model_no)\n                    c=int(request.vars.Customer_ID)\n                    db((db.DEMANDS.Model_no==m ) & (db.DEMANDS.Customer_ID==c)).delete()                           \n                    response.flash=\'Bike Ordered !!\'\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef add_expense():\n    \'auth\' in globals()\n    if auth.user:\n        form=SQLFORM(db.FINANCE)\n        if form.accepts(request.vars,session):\n                    response.flash=\'Expense Added !!\'\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef list():\n        if auth.user:\n            l=db(db.DEMANDS.Waiting_list_no > 0).select()\n            c=db(db.CUSTOMER.Customer_ID > 0).select()\n        else:\n            redirect(URL(\'user\'))\n        return locals()\n\ndef order_bikes():\n       if auth.user:\n           m=db(db.MODEL.Model_no > 0).select()\n           l=db(db.DEMANDS.Waiting_list_no > 0).select()\n       else:\n           redirect(URL(\'index\'))\n       return locals()\n              \n            \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(edit_empl)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/urvashi/Desktop/WEB2PY/web2py/applications/GoGreen_Motors_2/controllers/default.py", line 331, in <module>\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/urvashi/Desktop/WEB2PY/web2py/applications/GoGreen_Motors_2/controllers/default.py", line 107, in edit_empl\n    record=db(db.EMPLOYEE.Emp_ID==eid).select()\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 8905, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1618, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1478, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1311, in expand\n    return op(first, second)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1239, in EQ\n    self.expand(second, first.type))\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1321, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1746, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'edit_emp_3\'\n'
p11
s.