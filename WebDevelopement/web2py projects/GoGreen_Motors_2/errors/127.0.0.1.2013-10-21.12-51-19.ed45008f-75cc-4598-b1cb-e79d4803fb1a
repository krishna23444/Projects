(dp1
S'output'
p2
S'<class \'_mysql_exceptions.OperationalError\'> (1054, "Unknown column \'EMPLOYEE.Email_ID\' in \'field list\'")'
p3
sS'layer'
p4
S'/home/urvashi/Desktop/WEB2PY/web2py/applications/GoGreen_Motors_2/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    \'auth\' in globals()\n   \n    message="Go Green Welcomes You !!"\n    if auth.user :\n        if auth.user.id==1:\n            message="Welcome TSM HYDERABAD"\n            redirect(URL(\'admin\'))\n        else:\n            message="Welcome Employee"\n            redirect(URL(\'empl\'))\n    else:\n        redirect(URL(\'user\'))\n    return locals()\n\ndef admin():\n    man=db(db.EMPLOYEE.Designation==\'Manager\').select()\n    team=db(db.EMPLOYEE.Designation==\'Team Leader\').select()\n    exe=db(db.EMPLOYEE.Designation==\'Executive\').select()\n    return locals()\ndef add_employee():\n    \'auth\' in globals()\n\n    if auth.user:\n         if auth.user.id!=1:\n             redirect(URL(\'user\'))\n         else:\n            form=SQLFORM(db.Employees)\n            if form.accepts(request.vars,session):\n                    response.flash=\'Employee Added !!\'\n\n            elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n         redirect(URL(\'user\'))\n    return locals()\n\ndef delete_employee():\n    \'auth\' in globals()\n    message=""\n    if auth.user.id==1:\n        list=db(db.EMPLOYEE.Emp_ID>0).select()\n        form=SQLFORM.factory(\n                    db.Field(\'usrname\',db.Employees,requires=IS_IN_DB(db,\'EMPLOYEE.Emp_ID\',\'EMPLOYEE.Email_id\'),required=True))\n        if form.accepts(request.vars,session):\n                    e=db(db.EMPLOYEE.Emp_ID==int(request.vars.usrname)).select()\n                    db(db.EMPLOYEE.Emp_ID==int(request.vars.usrname)).delete()\n                    db(db.auth_user.email==e[0][\'Email_id\']).delete()\n                    message="employee deleted !!"\n                    redirect(URL(\'delete_employee\'))\n        elif form.errors:\n                    response.flash=\'ERRORS!!!\'\n    else:\n        redirect(URL(\'user\'))\n    return locals()\n\n\n\n\ndef empl():\n    if auth.user:\n       if auth.user:\n           e=db((auth.user.id==db.auth_user.id) & (db.auth_user.email==db.EMPLOYEE.Email_ID)).select()\n           mod=db(db.MODEL.Model_no>0).select()\n        #   wait=db(db.Waiting_list.id>0).select(orderby=(db.Waiting_list.Ordered_on))\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(admin)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/urvashi/Desktop/WEB2PY/web2py/applications/GoGreen_Motors_2/controllers/default.py", line 132, in <module>\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/urvashi/Desktop/WEB2PY/web2py/applications/GoGreen_Motors_2/controllers/default.py", line 29, in admin\n    man=db(db.EMPLOYEE.Designation==\'Manager\').select()\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 8905, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1631, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1596, in _select_aux\n    self.execute(sql)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1709, in execute\n    return self.log_execute(*a, **b)\n  File "/home/urvashi/Desktop/WEB2PY/web2py/gluon/dal.py", line 1703, in log_execute\n    ret = self.cursor.execute(*a, **b)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py", line 174, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nOperationalError: (1054, "Unknown column \'EMPLOYEE.Email_ID\' in \'field list\'")\n'
p11
s.